@model Myvshoponline.User
@{
  ViewBag.Title = "Reset password";
}

<section id="content" class="section-padding">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-6 col-md-6 col-xs-12">

        <div class="page-login-form box">


          @using (Html.BeginForm("ResetPassword", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
          {
            @Html.AntiForgeryToken()
            <h3 style="color:#167A7C;padding:0px;font-size:10px">Reset your Password</h3>
            <hr />
            @*<h3 style="color:#167A7C; margin-left:50px;">
          @if(@ViewBag.Message!="")
          {
              @ViewBag.Message
          }
      </h3>*@
            if (ViewBag.PasswordReset != null)
            {
              <h5 style="font-size:10px;" class="alert alert-success">@ViewBag.PasswordReset <br /><a href="~/Account/Login" class="btn btn-common">Login here</a></h5>
            }
            if (ViewBag.NotFound != null)
            {
              <h5 style="font-size:10px;" class="alert alert-danger">@ViewBag.NotFound</h5>
            }

            if (Request.QueryString["q"] != null)
            {
              <h5 style="font-size:10px;" class="alert alert-success">@Request.QueryString["q"]</h5>
            }
            @Html.ValidationSummary("", new { @class = "text-danger" })
            <input type="hidden" name="Email" value="@Request.QueryString["em"]" />
            <div class="form-group">
              <div class="col-md-10">

                @Html.Editor("OTP", new { htmlAttributes = new { @placeholder = "Enter OTP", @class = "form-control", @required = "required" } })
              </div>
            </div>

            <div id="display_count" style="color:red;"></div>
            <div class="form-group">
              <div class="col-md-10">
                @Html.Editor("Password", new { htmlAttributes = new { @type = "password", @id = "Password", @placeholder = "New Password ", @class = "form-control", @required = "required" } })

              </div>
            </div>

            <div class="form-group">
              <div class="col-md-10">
                @Html.Editor("ConfirmPassword", new { htmlAttributes = new { @type = "password", @id = "ConfirmPassword", @placeholder = "Confirm Password ", @class = "form-control", @required = "required" } })
              </div>
            </div>
            <span id="StrengthDisp" class="badge displayBadge" style="margin:4px;"></span>

            <div class="form-group">
              <div class="col-md-offset-2 col-md-10">
                @*<input type="submit" class="btn btn-default" value="Reset" />*@

                @*<a href="~/Home/ResetPassword/@Model.Code" style="background-color:#1C9A9D; color:white; font-size:17px; font-family:'Century Gothic'; font-weight:400; width:29%; margin:0;" class="btn btn-default">Reset Password </a>*@

                <input style="background-color:#1C9A9D; color:white; font-size:17px; font-family:'Century Gothic'; font-weight:400; width:100%; margin:0;" type="submit" value="Reset Password" class="btn btn-success" onclick="return Validate()" />
              </div>
            </div>
          }
        </div>
      </div>
    </div>
  </div>
</section>
@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}


<script type="text/javascript">
  function Validate() {
    var password = document.getElementById("Password").value;
    var confirmPassword = document.getElementById("ConfirmPassword").value;
    if (password != confirmPassword) {
      $('#display_count').html('<div class="alert alert-danger">Passwords does not match</div>');
      return false;
    }
    return true;
  }
</script>

<script type="text/javascript">
  // timeout before a callback is called

  let timeout;

  // traversing the DOM and getting the input and span using their IDs

  let password = document.getElementById('Password')
  let strengthBadge = document.getElementById('StrengthDisp')

  // The strong and weak password Regex pattern checker

  //let strongPassword = new RegExp('(?=.*[A-Z])(?=.*[0-9])|(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.{8,})')
  let strongPassword = new RegExp('((?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))');
  /*let strongPassword = new RegExp('((?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{6,}))')*/
  /*let mediumPassword = new RegExp('((?=.*[A-Z])(?=.*[0-9])|(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.{6,}))|((?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])(?=.{8,}))')*/

  function StrengthChecker(PasswordParameter) {
    // We then change the badge's color and text based on the password strength

    if (strongPassword.test(PasswordParameter)) {
      strengthBadge.style.backgroundColor = "green"
      strengthBadge.style.color = "white"
      strengthBadge.textContent = 'Strong'
    }
    //else if (mediumPassword.test(PasswordParameter)) {
    //  strengthBadge.style.backgroundColor = 'blue'
    //  strengthBadge.style.color = "white"
    //  strengthBadge.textContent = 'Medium'
    //}
    else {
      strengthBadge.style.backgroundColor = 'red'
      strengthBadge.textContent = 'Weak'
      $('#display_count').html('<div class="alert alert-danger">Password must contain atleast 1 UPPERCASE, 1 lowercase, 1 digit, 1 special character and 6 characters minimun</div>');
    }
  }

  // Adding an input event listener when a user types to the  password input
  password.addEventListener("input", () => {
    //The badge is hidden by default, so we show it
    strengthBadge.style.display = 'block'
    clearTimeout(timeout);
    //We then call the StrengChecker function as a callback then pass the typed password to it
    timeout = setTimeout(() => StrengthChecker(password.value), 500);
    //Incase a user clears the text, the badge is hidden again
    if (password.value.length !== 0) {
      strengthBadge.style.display != 'block'
    } else {
      strengthBadge.style.display = 'none'
    }
  });
</script>
